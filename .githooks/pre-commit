#!/usr/bin/env bash
set -euo pipefail

ROOT="$(git rev-parse --show-toplevel)"
cd "$ROOT"

# --- stash unstaged changes so we only modify staged content ---
git stash -q --keep-index
restore_stash() {
  if ! git stash pop -q; then
    echo "[pre-commit] Could not auto-restore unstaged changes (conflicts)."
    echo "             Your changes are preserved in the stash."
    echo "             Run:  git stash list"
    echo "                   git stash show -p stash@{0} | less"
    echo "                   git stash apply --index stash@{0}"
    echo "                   (resolve conflicts, git add -A)"
    echo "                   git stash drop stash@{0}"
  fi
}
trap restore_stash EXIT

# ------------------ RUST (backend) ------------------
echo "[pre-commit] Auto-formatting Rust (backend)…"
# Write changes (NOT --check), only for backend workspace
cargo fmt --manifest-path ./apps/backend/Cargo.toml

# Re-stage any fmt changes under backend
git add -A apps/backend

echo "[pre-commit] Running clippy (deny warnings)…"
cargo clippy --manifest-path ./apps/backend/Cargo.toml --all-targets --all-features -- -D warnings

# ------------------ FRONTEND (unchanged) ------------------
# Arrays for files
PRETTIER_ABS=()  # repo-relative
ESLINT_ABS=()
PRETTIER_REL=()  # app-relative (for -C apps/frontend)
ESLINT_REL=()

# NOTE: avoid subshell so arrays persist (use process substitution instead of a pipe)
while IFS= read -r -d '' path; do
  case "$path" in
    apps/frontend/*)
      rel="${path#apps/frontend/}"
      # Prettier set (broad, includes JSON)
      case "$path" in
        *.ts|*.tsx|*.js|*.jsx|*.cjs|*.mjs|*.json|*.md|*.mdx|*.css|*.scss|*.yml|*.yaml|*.html)
          PRETTIER_ABS+=("$path")
          PRETTIER_REL+=("$rel")
          ;;
      esac
      # ESLint set (code only)
      case "$path" in
        *.ts|*.tsx|*.js|*.jsx|*.cjs|*.mjs)
          ESLINT_ABS+=("$path")
          ESLINT_REL+=("$rel")
          ;;
      esac
      ;;
    *) ;;
  esac
done < <(git diff --cached -z --name-only --diff-filter=ACMR)

# Run Prettier
if ((${#PRETTIER_REL[@]})); then
  echo "[pre-commit] Formatting staged frontend files with Prettier..."
  pnpm -C apps/frontend exec prettier --write -- "${PRETTIER_REL[@]}"
  # Re-stage formatted files using repo-relative paths
  git add -- "${PRETTIER_ABS[@]}"
else
  echo "[pre-commit] No frontend files to format."
fi

# Run ESLint
if ((${#ESLINT_REL[@]})); then
  echo "[pre-commit] Linting staged frontend code with ESLint..."
  pnpm -C apps/frontend exec eslint --max-warnings=0 --cache -- "${ESLINT_REL[@]}"
else
  echo "[pre-commit] No frontend code files to lint."
fi

echo "[pre-commit] OK"

